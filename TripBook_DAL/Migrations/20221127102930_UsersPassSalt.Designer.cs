// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripBook.DAL.Context;

#nullable disable

namespace TripBook.DAL.Migrations
{
    [DbContext(typeof(TripBookContext))]
    [Migration("20221127102930_UsersPassSalt")]
    partial class UsersPassSalt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TripBook.DAL.Entities.CitiesToVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CitiesToVisits");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GalleryId"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GalleryId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.GalleryImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryImages");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57ef6a6e-4410-4345-b8e8-45ee6162929f"),
                            Biography = "I'm Marco Polo, I love Asia!!",
                            BirthDate = new DateTime(1254, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcopolo@gmail.com",
                            EmailConfirmed = false,
                            EncodedPassword = new byte[0],
                            Gender = 0,
                            HomeCountry = "Italy",
                            Name = "Marco Polo",
                            NickName = "Milione",
                            PhotoUrl = "",
                            Salt = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("TripBook.DAL.Entities.VisitedCities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomandation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("UserId");

                    b.ToTable("Visiteds");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.CitiesToVisit", b =>
                {
                    b.HasOne("TripBook.DAL.Entities.User", null)
                        .WithMany("CitiesToVisit")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.GalleryImage", b =>
                {
                    b.HasOne("TripBook.DAL.Entities.Gallery", "Gallery")
                        .WithMany("GalleryImages")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.VisitedCities", b =>
                {
                    b.HasOne("TripBook.DAL.Entities.Gallery", "gallery")
                        .WithMany()
                        .HasForeignKey("GalleryId");

                    b.HasOne("TripBook.DAL.Entities.User", null)
                        .WithMany("VisitedCities")
                        .HasForeignKey("UserId");

                    b.Navigation("gallery");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.Gallery", b =>
                {
                    b.Navigation("GalleryImages");
                });

            modelBuilder.Entity("TripBook.DAL.Entities.User", b =>
                {
                    b.Navigation("CitiesToVisit");

                    b.Navigation("VisitedCities");
                });
#pragma warning restore 612, 618
        }
    }
}
